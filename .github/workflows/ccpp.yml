name: C/C++ CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest] #, windows-latest
        true-os: [native, dos]
        exclude:
          - os: windows-latest
            true-os: dos
          - os: macos-latest
            true-os: dos
    steps:
    - name: DOS Setup
      if: matrix.true-os == 'dos'
      run: |
        wget https://github.com/andrewwutw/build-djgpp/releases/download/v2.8/djgpp-linux64-gcc720.tar.bz2
        tar -xvf djgpp-linux64-gcc720.tar.bz2
        export PATH=$PWD/djgpp/bin:$PATH
    - name: Mac Setup
      if: matrix.os == 'macos-latest'
      run: |
        brew install autoconf automake libtool
    - name: Checkout
#     if: matrix.true-os == 'native'
      uses: actions/checkout@v1
    - name: Automake
#     if: matrix.true-os == 'native'
      run: |
        aclocal
        autoconf
        automake --add-missing
    - name: Configure (Native)
#     if: matrix.true-os == 'native'
      run: ./configure
    - name: Configure (DOS)
      if: matrix.true-os == 'dos'
#     run: ./configure --build i686-pc-linux-gnu --host djgpp-linux64-gcc720
      run: ./configure --host djgpp-linux64-gcc720
    - name: make
      if: matrix.true-os == 'native'
      run: |
        make
        make distcheck
        ls
    - name: Stash (Native)
      if: matrix.true-os == 'native'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.os }}.tar.gz
        path: helloworld-0.01.tar.gz
    - name: Stash (Non-Native)
      if: matrix.true-os == 'dos'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.true-os }}.tar.gz
        path: helloworld-0.01.tar.gz
# release:
#   runs-on: ubuntu-latest
#   needs: [build]
#   steps:
#     - name: Download the Linux dist.
#       uses: actions/download-artifact@v1
#       with:
#         name: ubuntu-latest.tar.gz
#         path: build/ubuntu-latest.tar.gz
#     - name: Download the macOS dist.
#       uses: actions/download-artifact@v1
#       with:
#         name: macos-latest.tar.gz
#         path: build/macos-latest.tar.gz
##    - name: GitHub Releases
##      uses: fnkr/github-action-ghr@v1
##      if: startsWith(github.ref, 'refs/tags/')
##      env:
###       GHR_COMPRESS: xz
##        GHR_PATH: build/
##        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1.0.0
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ github.ref }}
#         release_name: Release ${{ github.ref }}
#         draft: false
#         prerelease: true
#     - name: Upload Ubuntu Release Asset
#       id: upload-release-asset-ubuntu
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: ./build/ubuntu-latest.tar.gz
#         asset_name: ubuntu-latest.tar.gz
#         asset_content_type: application/gzip
#     - name: Upload macOS Release Asset
#       id: upload-release-asset-macos
#       uses: actions/upload-release-asset@v1.0.1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#         asset_path: ./build/ubuntu-latest.tar.gz
#         asset_name: ubuntu-latest.tar.gz
#         asset_content_type: application/gzip
