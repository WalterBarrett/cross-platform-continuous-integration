name: C/C++ CI

on: [push]

jobs:
  build-native:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: "macOS: Setup"
      if: matrix.os == 'macos-latest'
      run: brew install autoconf automake libtool
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build (Native)
      run: make
    - name: "*nix: Stash"
      uses: actions/upload-artifact@v1
      with:
        name: helloworld-${{ matrix.os }}
        path: helloworld
    - name: "Windows: Stash"
      uses: actions/upload-artifact@v1
      with:
        name: helloworld-${{ matrix.os }}
        path: helloworld.exe
  build-cross:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        os: [dos]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: "DOS: Build"
      if: matrix.os == 'dos'
      run: |
        wget -q https://github.com/andrewwutw/build-djgpp/releases/download/v2.8/djgpp-linux64-gcc720.tar.bz2
        tar -xf djgpp-linux64-gcc720.tar.bz2
        export PATH=${PWD}/djgpp/bin/:$PATH
        make PREFIX="i586-pc-msdosdjgpp-" MAIN="HELLO.EXE"
    - name: "DOS: Prepare for Stash"
      if: matrix.os == 'dos'
      run: |
        mkdir temp-dist-dir
        mkdir temp-extract-dir
        cd temp-extract-dir
        wget -q http://sandmann.dotster.com/cwsdpmi/csdpmi7b.zip
        unzip -q csdpmi7b.zip
        cd ..
        mv HELLO.EXE temp-dist-dir/HELLO.EXE
        mv temp-extract-dir/bin/CWSDPMI.EXE temp-dist-dir/CWSDPMI.EXE
    - name: List Directory Structure
      run: ls
    - name: "DOS: Stash"
      if: matrix.os == 'dos'
      uses: actions/upload-artifact@v1
      with:
        name: helloworld-${{ matrix.os }}
        path: temp-dist-dir
